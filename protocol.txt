####################
#    Signature    #
####################

- Let G be a group of unknown order with no known low-order elements.
- Let g,h in G be two generators with an unknown discrete log relation.


* SendTokens(pk):   to send tokens to an RSA public key pk=(n,e) do:
  step 1:  generate a random 256-bit s' and set  s = H(s').
           Here H is a hash function that outputs a 2048-bit integer.

  step 2:  output  (C0, C1)  where
           C0 = RSAencrypt(pk, s')  in Z_n
           C1 = g^n * h^s  in G

  note: as described, the magnitude of C0 leaks information about n.
    Instead of simply reducing mod n, the algorithm must do the following:
        repeat:
            - choose a random r in {0,1,...,2^4104//n}
            - compute  C0 = (s^e mod n) + r*n  in Z
        until  (C0 < 2^4104)
        output C0 in Z
    this process ensures that C0 is uniform in {0,1,...,2^4104-1}
    and is independent of n, as long as n is at most 4096 bits.

  another note: while C1 is on the blockchain, C0 can be off chain.
        There is a public association between C0 and pk (e.g., via a hash
        table), so that the owner of pk can easily find C0.  One can
        include H(C1) in the plaintext encrypted in C0 to help the owner
        of pk quickly find C1.


* Sign(sk, (C0,C1), m):  to withdraw the funds associated with (C0,C1)
  by signing a message m using the RSA secret key sk do:

  step 1:  Use sk to decrypt C0 and obtain s'.  Compute s = H(s').
           Then  C1 = g^n * h^s in G.

  step 2:  find a prime 2 <= t <= 1000  s.t. t is a quadratic residue mod n.

  step 3:  find integers (w,a) such that   w^2 = t + a*n
           (i.e. w is sqrt(t) mod n)

  step 4:  choose a random 2048-bit integer s1 and compute
           C2 = g^w * h^(s1) in G

  NOTE:  need also to comit to the value a.   See the full writeup in paper.tex.


  With (C2, t) public, the computed signature is a
  signature of knowledge of integers (n, w, a, s, s1) where
    (1)  C1 = g^n h^s in G,
    (2)  C2 = g^w h^(s1) in G,
    (3)  w^2 = t + a*n.

  The ZKPK works by proving knowledge of seven integers
      w, w2, s1, a, an, s1w, sa
  satisfying:
     C2 = g^w h^(s1)
     g^(w2) h^(s1w) = C2^w
     g^(an) h^(sa) = C1^a
     w2 = t + an

  Concretely:
    (i) choose seven random 2048-bit integers
            r_w, r_w2, r_s1, r_a, r_an, r_s1w, r_sa

    (ii) compute
            A = g^(r_w)  h^(r_s1)
            B = g^(r_w2) h^(r_s1w) / C2^(r_w)
            C = g^(r_an) h^(r_sa)  / C1^(r_a)
            D = r_w2 - r_an   in the integers

    (iii) computes
            PRNG_Key = Hash(m, G, g, h, C1, C2, t, A, B, C, D)

    (iv) Use a PRNG seeded with PRNG_Key to generate a random 128-bit chal
         and a random 128-bit prime ell.
     note:  need to check if a Miller-Rabin pseudoprime is sufficient.

    (v) compute the integer vector
            z = chal*(w, w2, s1, a, an, s1w, sa) +
                   (r_w, r_w2, r_s1, r_a, r_an, r_s1w, r_sa)  in Z^7
        let z = (z_w, z_w2, z_s1, z_a, z_an, z_s1w, z_sa)
       and z' = (z mod ell) = (z_w mod ell, z_w2 mod ell, ..., z_sa mod ell) \in Z^7

    (vi) compute  (here  x // y  is the integer quotient of x divided by y)
            Aq = g^(z_w  // ell)  h^(z_s1  // ell) in G
            Bq = g^(z_w2 // ell)  h^(z_s1w // ell)  /  C2^(z_w // ell) in G
            Cq = g^(z_an // ell)  h^(z_sa  // ell)  /  C1^(z_a // ell) in G
            Dq = (z_w2 - z_an) // \ell   in the integers

    (vii) output the signature sig = (C2, t, chal, ell, Aq, Bq, Cq, Dq, z')



* Verify(C1, m, sig):
    verify that sig is a valid Schnorr signature using
    public key C1 on the message (m, C1, C2).

    (1) Compute
            A = Aq^ell g^(z'_w)  h^(z'_s1)  / C2^(chal)
            B = Bq^ell g^(z'_w2) h^(z'_s1w) / C2^(z'_w)
            C = Cq^ell g^(z'_an) h^(z'_sa)  / C1^(z'_a)
            D = Dq * ell + ((z'_w2 - z'_an) mod ell) - t * chal
            PRNG_key = Hash(G, g, h, C1, C2, t, A, B, C, D, M)

    (2) Use a PRNG seeded with PRNG_Key to generate chal' and ell'
        as described in step (iii) and (iv) of sign.

    note:  since ell is included in the signature, the verifier
           does not need to search for a prime, but can instead
           verify that the given ell is prime and is not too far
           from the base starting point of the prime search.

    (3) Accept iff chal' == chal and ell' == ell.




### Comments ###

1. There is a seemingly simpler method to prove that one knows the
   factorization of n, namely, prove that one knows p such that p
   divides n.  That is, instead of committing to "w" we would commit
   to "p" and then prove that the committed value divides n. But we
   would also need to prove that the committed factor is not one of
   {1, -1, n, -n}, and that will result in a longer proof.

2. RSAGroupOps implements the quotient group (Z/n)/{1,-1},
   representing elements as |x| = min(x, n - x). This is because the
   proof method requires that no one knows an element of low order
   other than the identity in the group of unknown order.  But for
   Z/n, -1 is such an element. By quotienting out {1,-1}, -1 becomes
   the identity (since min(n - 1, (n + 1) mod n) == 1).
